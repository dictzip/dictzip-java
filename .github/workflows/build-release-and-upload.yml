on:
  push:
    tags:
    - 'v*'

name: Upload Release Asset

jobs:
  build:
    name: Upload Release Asset
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '8'
    - name: Get the version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\/v/}
    - uses: gradle/gradle-build-action@v2
    - run: ./gradlew check build assemble
      env:
        CI: true
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release v${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
    - name: Publish package to OSSRH
      run: ./gradlew publishToSonatype
      env:
        ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_SECRET_KEY }}
        ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.GPG_KEY_PASSPHARASE }}
        SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
        SONATYPE_PASS: ${{ secrets.SONATYPE_PASS }}
    - name: Upload Release Asset(cli.zip)
      id: upload-release-asset-zip
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dictzip-cli/build/distributions/dictzip-${{ steps.get_version.outputs.VERSION }}.zip
        asset_name: dictzip-${{ steps.get_version.outputs.VERSION }}.zip
        asset_content_type: application/zip
    - name: Upload Release Asset(cli.tgz)
      id: upload-release-asset-tgz
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dictzip-cli/build/distributions/dictzip-${{ steps.get_version.outputs.VERSION }}.tgz
        asset_name: dictzip-${{ steps.get_version.outputs.VERSION }}.tgz
        asset_content_type: application/x-gtar
    - name: Upload Release Asset(lib.jar)
      id: upload-release-asset-lib
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dictzip-lib/build/libs/dictzip-lib-${{ steps.get_version.outputs.VERSION }}.jar
        asset_name: dictzip-lib-${{ steps.get_version.outputs.VERSION }}.jar
        asset_content_type: application/java-archive
    - name: Upload Release Asset(lib.sources.jar)
      id: upload-release-asset-sources
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dictzip-lib/build/libs/dictzip-lib-${{ steps.get_version.outputs.VERSION }}-sources.jar
        asset_name: dictzip-lib-${{ steps.get_version.outputs.VERSION }}-sources.jar
        asset_content_type: application/java-archive
    - name: Upload Release Asset(lib.javadoc.jar)
      id: upload-release-asset-javadoc
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: dictzip-lib/build/libs/dictzip-lib-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        asset_name: dictzip-lib-${{ steps.get_version.outputs.VERSION }}-javadoc.jar
        asset_content_type: application/java-archive
